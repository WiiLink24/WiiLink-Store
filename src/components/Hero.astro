---
import { Icon } from "astro-icon/components";

const heroData = {
  title: "WiiLink Hoodie",
  subtitle: "Wear it proud! The official WiiLink Hoodie is now up for grabs!",
  price: "$30",
  images: {
    background: "/img/hero/hero-bg.png",
    foreground: "/img/hero/hoodie-woman.png",
    pattern: "/img/hero/wiilink-pattern.png",
    priceTag: "/img/hero/price-tag.svg",
  },
};
---

<div
  class={`scrollanim left-1/2 -translate-x-1/2 w-full max-w-[1900px] h-screen max-h-[1000px] flex flex-col justify-center items-center relative bg-[url('${heroData.images.background}')] bg-cover bg-center overflow-hidden z-0`}
  id="hero-container"
>
  <span
    class="w-50 h-50 translate-x-56 -translate-y-56 hidden lg:block relative z-1"
  >
    <img
      style="filter: invert(64%) sepia(57%) saturate(6110%) hue-rotate(170deg) brightness(107%) contrast(98%);"
      class="rotate absolute z-0"
      src={heroData.images.priceTag}
    />
    <span
      class="left-1/2 top-1/2 pt-6 -translate-x-1/2 -translate-y-1/2 text-7xl font-bold !text-white absolute z-10"
      >{heroData.price}</span
    >
  </span>
  <h1
    class="!text-9xl !text-white !font-[Rubik] font-bold text-center absolute z-0 hidden lg:block"
  >
    {heroData.title}
  </h1>
  <img
    src={heroData.images.foreground}
    alt="Hero Image"
    class="absolute -bottom-3 left-1/2 -translate-x-1/2 w-[500px] z-1 transition-transform duration-300 ease-out"
    id="parallax-image"
  />
  <img
    src={heroData.images.pattern}
    alt="Hero Pattern"
    class="absolute left-1/2 -translate-x-1/2 w-full h-full object-cover transition-transform duration-300 ease-out z-0"
    id="parallax-image-2"
  />
  <h1
    class="!text-9xl !font-[Rubik] font-bold text-center absolute z-3 text-outline-hero hidden lg:block"
  >
    {heroData.title}
  </h1>

  <div
    class="absolute bottom-0 left-0 w-full h-1/2 md:h-1/3 bg-gradient-to-t from-[#00000070] to-transparent z-2"
  >
  </div>

  <div
    class="px-6 absolute bottom-10 left-1/2 -translate-x-1/2 flex flex-col items-center w-full z-10"
  >
    <h1
      class="!text-4xl !m-0 !font-[Rubik] w-full font-bold text-left !text-white z-3 block md:hidden"
    >
      {heroData.title}
    </h1>
    <p class="!text-white text-2xl mt-4 z-3">
      {heroData.subtitle}
    </p>
    <a
      href="#products"
      class="bg-[#10b44f] !text-white px-6 py-3 rounded-full text-lg font-medium flex flex-row justify-center items-center gap-3 transition duration-200 hover:bg-[#0a9040] w-full md:w-auto"
      ><Icon name="lucide:shopping-bag" /> Shop Now</a
    >
  </div>
</div>

<script>
  document.addEventListener("astro:page-load", () => {
    const container = document.getElementById("hero-container");
    const image = document.getElementById("parallax-image");
    const image2 = document.getElementById("parallax-image-2");

    if (!container || !image || !image2) return;

    // Movement strengths for parallax effect
    const strengthForeground = 20;
    const strengthBackground = 10;

    container.addEventListener("mousemove", (e) => {
      // Get mouse position relative to the container
      const rect = container.getBoundingClientRect();
      const x = e.clientX - rect.left - rect.width / 2;
      const y = e.clientY - rect.top - rect.height / 2;

      // Calculate movement based on mouse position
      const moveXForeground = (x / rect.width) * strengthForeground;
      const moveYForeground = (y / rect.height) * strengthForeground;

      const moveXBackground = (x / rect.width) * strengthBackground;
      const moveYBackground = (y / rect.height) * strengthBackground;

      // Apply transform for parallax movement
      image.style.transform = `translate(calc(${moveXForeground}px), ${moveYForeground}px)`;
      image2.style.transform = `translate(calc(${moveXBackground}px), ${moveYBackground}px)`;
    });

    // Reset position when the mouse leaves the container
    container.addEventListener("mouseleave", () => {
      image.style.transform = "translate(0%, 0)";
      image2.style.transform = "translate(0%, 0)";
    });
  });
</script>

<style>
  .text-outline-hero {
    color: transparent !important;
    -webkit-text-stroke: 3px white;
    text-stroke: 3px white;
  }

  .rotate {
    animation: rotate 50s linear infinite;
  }

  @keyframes rotate {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .scrollanim {
    animation: round-scale ease-out forwards;
    animation-timeline: scroll();
    animation-range: 0vh 30vh;
  }

  @keyframes round-scale {
    0% {
      transform: scale(1);
      border-radius: 0px;
    }
    100% {
      transform: scale(0.9);
      border-radius: 38px;
    }
  }
</style>
